{"tagline":"Powerful and extensible logger for dart.","body":"Log4Dart\r\n========\r\n**Log4Dart** is a powerful and extensible logger for Dart inspired by [Slf4J][slf4j]. \r\nIt supports logging at ERROR, WARN, INFO and DEBUG levels and has easy support for\r\nconfiguring specific appenders and logging formats. It also supports a nested\r\ndiagnostic context that allows you to eassly make session specific log traces\r\naccross deep and recursive calls. \r\n\r\nUsing log4dart\r\n--------------\r\nTo use Log4Dart add the following to your **pubspec.yaml** file\r\n\r\n```\r\ndependencies:\r\n  log4dart:\r\n    git: git://github.com/Solvr/log4dart.git\r\n```\r\n\r\nnow install it by executing **pub install** and in your Dart program add the import\r\n\r\n\r\n```\r\n#import(\"package:log4dart/log4dart.dart\");\r\n```\r\n\r\nNow you are ready to use **log4dart**. The example below shows you how\r\nto use it in your code.\r\n\r\n```\r\nclass MyClass {\r\n  MyClass()\r\n    : _logger = LoggerFactory.getLogger(\"MyClass\");\r\n\r\n  someMethod() {\r\n    _logger.info(\"a info message\");\r\n  }\r\n  \r\n  final Logger _logger;\r\n}\r\n```\r\n\r\nLog configuration\r\n-----------------\r\nThe logger is configured through the **LogConfig** API that can be accessed\r\nby logger name or wildcard via the **LoggerFactory.config[\"logger-name\"]**\r\nhandle. Below are some examples: \r\n\r\n```\r\n// Disable info for all loggers \r\nLoggerFactory.config[\"*\"].infoEnabled = false;\r\n  \r\n// Set the default logging format for all loggers\r\nLoggerFactory.config[\"*\"].logFormat = \"[%d] %c %n:%x %m\";\r\n  \r\n// Override logging levels for specifc loggers\r\nLoggerFactory.config[\"MyClass\"].debugEnabled = false;\r\nLoggerFactory.config[\"MyClass\"].infoEnabled = true;\r\n```\r\n\r\nFor log formating **log4dart** supports many of the same options as is known\r\nfrom other loggers, such as:\r\n\r\n * **c** Output the level (category) of the logging event\r\n * **d** Output the date when the log message was recorded\r\n * **m** Output the actual logging message\r\n * **n** Output the name of the logger that recorded the log\r\n * **x** Output the context of the logger\r\n\r\nLog4Dart defaults to logging to the console but also supports various appenders \r\n\r\n  * **ConsoleAppender** Appender that logs to the console\r\n  * **FileAppender** Appender that logs to a file\r\n  * **StringAppender** Appender that logs to a string buffer \r\n\r\nappenders are also configured through the **LoggerFactory.config** interface \r\n\r\n```\r\n// Use a file appender for a specifc logger\r\nLoggerFactory.config[\"OtherClass\"].appenders = [new FileAppender(\"/tmp/log.txt\")];\r\n```\r\n\r\nto get output in multiple places, just add multiple appenders to the appenders list.\r\n\r\n\r\nDiagnostic support\r\n------------------\r\nThe logger supports nested diagnostic contexts which can be used to\r\ntrack application state like this\r\n\r\n```\r\nlogger.putContext(\"context-name\", \"context-message\");\r\ntry {\r\n  // log messages from now gets added a context-message\r\n  :\r\n  logger.debug(\"something important happend\");\r\n} finally {\r\n  // stop logging with context-message\r\n  logger.removeContext(\"context-name\");\r\n}\r\n```\r\n\r\nA running example of this can be seen in the **ContextLogTest.dart** class in the **test** folder.\r\n\r\nTODO\r\n----\r\nSome missing stuff (feel free to add more):\r\n\r\n  1. Generate DartDoc for Logger and Appender interface\r\n  1. Create a Dart version of **sprintf** and use it for implementing the formatters \r\n  1. When reflection arrives in Dart add ability to show the class/line where the log message originated\r\n\r\nfeel free to send in patched for these (or other features you miss).\r\n\r\nLicense\r\n-------\r\nBSD License (Same as Dart itself). See LICENSE file.  \r\n\r\n[slf4j]: http://www.slf4j.org/\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Log4dart","google":""}